---
import Badge from '../atoms/Badge.astro';
import Card from '../atoms/Card.astro';

// Props
const { title, description, cardData, badgeClassName = "" } = Astro.props;
---

<section id="features-section" class="bg-primary text-neutral p-12 sm:px-24 space-y-8 opacity-0 transition-opacity duration-700">
  <div class="grid grid-cols-1 sm:grid-cols-2 gap-8">
    <div class="gap-4">
      <Badge title="Expertise. Stratégie. Succès." variant="dark-gray" className={badgeClassName} />
      <h2 class="text-3xl font-bold text-accent">{title}</h2>
    </div>
    <div>
      <p class="text-lg">{description}</p>
    </div>
  </div>

  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
    {cardData.map((card: { icon: any; title: any; description: any; }, index: any) => (
      <Card
        key={index}
        icon={card.icon}
        title={card.title}
        description={card.description}
        className="Card p-6 bg-dark-gray rounded-lg shadow-md transition-all duration-300 group hover:bg-accent hover:text-neutral opacity-0 transform translate-y-10"
        iconClass="text-accent group-hover:text-neutral transition-colors duration-300"
      />
    ))}
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const section = document.getElementById("features-section");

    if (section) {
      const cards = section.querySelectorAll(".Card");

      const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // Trigger fade-in animation for the whole section
            section.classList.remove("opacity-0");
            section.classList.add("opacity-100");

            // Animate each card individually with a delay
            cards.forEach((card, index) => {
              if (card) {
                setTimeout(() => {
                  card.classList.remove("opacity-0", "translate-y-10");
                  card.classList.add("opacity-100", "translate-y-0");
                }, index * 150);  // Delay each card by 150ms
              }
            });

            // Stop observing after animation is triggered
            observer.unobserve(section);
          }
        });
      }, { threshold: 0.3 }); // Trigger when 30% of the section is in view

      observer.observe(section);
    }
  });
</script>
